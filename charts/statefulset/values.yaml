# Default values for a "statefulset"

# REQUIRED for you to set a value here, name of your service
name: ""

# Number of pods in statefulset, default of not highly available (override on HA environments)
replicaCount: 1

# minReadySeconds
minReadySeconds: false

# Rollback limit
revisionHistoryLimit: 10

# The pod priority, to make things more critical
# See: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/
priorityClassName: ""

# Image repository location (override if needed)
image:
  # Which image to release (NOTE: ONLY SPECIFY IF YOU ARE DEPLOYING EXTERNALLY, eg from dockerhub)
  tag: ""
  # Which repo to use (NOTE: ONLY SPECIFY IF YOU ARE DEPLOYING EXTERNALLY)
  repository: ""
  # Which command to run (NOTE: ONLY SPECIFY IF YOU NEED)
  command: []
  # What args to pass to the command (NOTE: ONLY SPECIFY IF YOU NEED)
  args: []
  # Image pull policy: IfNotPresent / Always
  imagePullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## imagePullSecrets:
  ##   - name: myRegistryKeySecretName
  ##
  imagePullSecrets: []

# Ingress definitions
ingress:
  enabled: false
  # If we want to override the name, RECOMMEND YOU DO NOT DO THIS UNLESS YOU NEED, it has a sane default
  name: ""
  # If we want to have affinity in nginx enabled
  nginx_affinity: true
  # This is for the nginx controllers, this should be set to the controller that is intended to route your service
  nginx_class: "infrastructure"
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - /
  tls: []

# Service definitions
service:
  enabled: true
  annotations: {}
  type: ClusterIP
  port: 80
  targetPort: 80
  name: default-service
  # externalTrafficPolicy: Local
  additionalPorts: []

# Additional container ports to open
# This can allow scraping by prometheus, or exposure to other services
additionalPorts: []
  # - containerPort: 8001
  #   name: http-admin
  #   protocol: TCP

# Additional pod annotations
podAnnotations: {}
  # tick: "1528451892"

# If you're using Kubernetes 1.20+ you'll want to enable this, this uses the new common label scheme
# See: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
# This is set to "false" by default for backwards compatibility reasons.  Ideally, all of your sub-charts
# use or do not use this.
usingNewRecommendedLabels: false

# Additional labels put onto anything that can be labelled (pods, services)
labels: {}

# This is a tweak for the labels above to NOT include the version string, otherwise we can't upgrade statefulsets
labelsIncludeChartVersion: false

# This enables the "default" label we automatically put everywhere (app: <name>)
labelsEnableDefault: true

# This adds lifecycle events for the statefulset
lifecycle: {}

# Environment variables
globalEnvs: []

# stdin and tty status
tty: false

# A secondary source for env variables (eg: for a specific env (eg: dev, or staging))
extraEnvs: []

# A way to pull secondary env variables from configmaps and secrets
envFrom: []

# livenessProbes are used to determine when to restart a container
livenessProbe:
  enabled: true
  # For the liveness probe we'll wait a full 2 minutes, just incase this service takes a while to start-up
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 9
  successThreshold: 1
  failureThreshold: 3

  # Specify either httpGet, tcpSocket or exec
  # httpGet uses path and port (below)
  # tcpSocket uses port (below)
  # exec uses command (below)
  probeType: httpGet

  # parameters for probes
  path: /alive
  port: default-service
  command:
    - ls -la /

# readinessProbes are used to determine when a container is ready to start accepting traffic
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 4
  successThreshold: 2
  failureThreshold: 2

  # Specify either httpGet, tcpSocket or exec
  # httpGet uses path and port (below)
  # tcpSocket uses port (below)
  # exec uses command (below)
  probeType: httpGet

  # parameters for probes
  path: /ready
  port: default-service
  command:
    - ls -la /

# Lower the ndots value, to reduce the search path expansion of DNS queries
# https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-config
dnsConfig:
  enabled: false
  ndots: 2

# container resource requests/limits
# this is set VERY low by default, to be aggressive above resource limiting, please override this if necessary
# Note: Limits are HARD Limits
#       Requests are "soft" limits and are what affects HPA (autoscaling) aggressiveness and are what is guaranteed
resources: {}

# limits:
#  cpu: 100m
#  memory: 64Mi
# requests:
#  cpu: 50m
#  memory: 32Mi

# Assign pods to nodes based on nodeSelector labels, define a default here if desired
nodeSelector: []
# purpose: node-feature-name

# Assign pods to nodes based on tolerations and taints
tolerations: []

# Init container(s)
initContainers: []
  # - name: volume-mount-hack
  #   image: busybox
  #   command: ["sh", "-c", "chown -R 1000:1000 /var/chaindata"]
  #   volumeMounts:
  #    - name: data
  #      mountPath: /var/chaindata

# Additional containers to be added to the pod (eg: add the cloudsql proxy)
extraContainers: []

# Volumes added to the pod eg: for cloudsql
volumes: []
volumeMounts: []

# Security context options, should default to run as non root enabled, but for now not
security:
  runAsNonRoot: false
  runAsUser: 1000
  fsGroup: 1000

# For AWS Security Groups
securityGroupIDs: []

# What update strategy to use
# Must be OnDelete / RollingUpdate
updateStrategy:
  type: RollingUpdate

# This is so we can use the same tag on various different objects (eg: statefulsets, crons, etc) via our Gitlab CI Automation
global:
  image:
    tag: ""
  # This can be used Gitlab CI and helm automatically to set our URIs based on namespace
  namespace: ""

sidecar:
  enabled: false

# This is for service accounts
serviceAccount:
  # Disabled by default, set to true if you want
  enabled: false
  # Add annotations if desited,
  annotations: {}
    # Here's an example of assigning an IAM role to a pod
    # eks.amazonaws.com/role-arn: arn:aws:iam::123123123:role/role-name-goes-here

# If we want a hostname set for this statefulset
hostname: ""

# This is incase we want persistence (a mounted volume) which is pretty standard on a statefulset
persistence:
  enabled: false
  size: 100Gi
  path: "/mnt/data"
  storageClass: "gp2-retain"

## For RBAC support, enable if you want, and set the rules you wish, examples below
rbac:
  create: false
  rules:
    ## Define specific rbac permissions.
    # Eg: This grants all on API groups
    # - apiGroups: ['*']
    #   resources: ['*']
    #   verbs: ['*']
    # Eg: This grants all on non resource URLs
    # - nonResourceURLs: ['*']
    #   verbs: ['*']
    # Eg: This is "readonly" for common resources
    # - resources: ["deployments", "configmaps", "pods", "pods/log", "services", "jobs", "jobs/status", "nodes", "serviceaccount", "namespaces"]
    #   verbs: ["get", "list", "watch"]

  ## Make this into a clusterwide role to give access to all namespaces if desired, disabled by default for more security
  clusterWideAccess: false
